name: Nightly build images (DockerHub)

on:
  schedule:
    - cron:  '5 2 * * *'
  workflow_dispatch:

defaults:
  run:
    shell: bash

env:
  DOCKER_REPOSITORY: "zabbix"
  LATEST_BRANCH: ${{ github.event.repository.default_branch }}
  BASE_BUILD_NAME: "build-base"

jobs:
  init_build:
    name: Initialize build
    runs-on: ubuntu-latest
    outputs:
      os: ${{ steps.os.outputs.list }}
      database: ${{ steps.database.outputs.list }}
      components: ${{ steps.components.outputs.list }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2.3.4
        with:
          ref: "refs/heads/trunk"
          fetch-depth: 1

      - name: Check build.xml file
        id: build_exists
        run: |
            if [[ ! -f "./build.xml" ]]; then
                echo "::error::File build.xml is missing"
                exit 1
            fi

      - name: Prepare Operating System list
        id: os
        run: |
            os_list=$(jq -r '.os |  keys | [ .[] | tostring ] | @json' "./build.xml")

            echo "::set-output name=list::$os_list"

      - name: Prepare Platform list
        id: platform_list
        run: |
            platform_list=$(jq -r '.os | tostring  | @json' "./build.xml")

            echo "::set-output name=list::$platform_list"

      - name: Prepare Database engine list
        id: database
        run: |
            database_list=$(jq -r '[.components | values[] ] | sort | unique | del(.. | select ( . == "" ) ) | [ .[] | tostring ] | @json' "./build.xml")

            echo "::set-output name=list::$database_list"

      - name: Prepare Zabbix component list
        id: components
        run: |
            component_list=$(jq -r '.components | keys | [ .[] | tostring ] | @json' "./build.xml")

            echo "::set-output name=list::$component_list"

  build_base:
    timeout-minutes: 70
    name: Build base on ${{ matrix.os }}
    needs: init_build
    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJson(needs.init_build.outputs.os) }}

    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2.3.4
        with:
          ref: "refs/heads/trunk"
          fetch-depth: 1

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Prepare Platform list
        id: platform
        run: |
            platform_list=$(jq -r '.os.${{ matrix.os }} | join(",")' "./build.xml")

            echo ::set-output name=list::$platform_list

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.DOCKER_REPOSITORY }}/zabbix-${{ env.BASE_BUILD_NAME }}
          tags: |
            type=raw,value=${{ matrix.os }}-trunk
            type=raw,value=trunk-${{ matrix.os }}
          flavor: |
            latest=auto

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./${{ env.BASE_BUILD_NAME }}/${{ matrix.os }}
          file: ./${{ env.BASE_BUILD_NAME }}/${{ matrix.os }}/Dockerfile
          platforms: ${{ steps.platform.outputs.list }}
          push: ${{ secrets.AUTO_PUSH_IMAGES }}
          tags: ${{ steps.meta.outputs.tags }}

      - name: Image digest
        run: |
            echo ${{ steps.docker_build.outputs.digest }}
            echo "${{ steps.docker_build.outputs.digest }}" > ${{ env.BASE_BUILD_NAME }}_${{ matrix.os }}

      - uses: actions/upload-artifact@v2.2.4
        with:
         name: ${{ env.BASE_BUILD_NAME }}_${{ matrix.os }}
         path: ${{ env.BASE_BUILD_NAME }}_${{ matrix.os }}
         if-no-files-found: error

  build_base_database:
    timeout-minutes: 70
    needs: [ "build_base", "init_build"]
    name: Build ${{ matrix.build }} base on ${{ matrix.os }}
    strategy:
      fail-fast: false  
      matrix:
        build: ${{ fromJson(needs.init_build.outputs.database) }}
        os: ${{ fromJson(needs.init_build.outputs.os) }}

    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2.3.4
        with:
          ref: "refs/heads/trunk"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Prepare Platform list
        id: platform
        run: |
            platform_list=$(jq -r '.os.${{ matrix.os }} | join(",")' "./build.xml")

            echo ::set-output name=list::$platform_list

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.DOCKER_REPOSITORY }}/zabbix-${{ matrix.build }}
          tags: |
            type=raw,value=${{ matrix.os }}-trunk
            type=raw,value=trunk-${{ matrix.os }}
          flavor: |
            latest=auto

      - uses: actions/download-artifact@v2.0.10
        with:
          name: build-base_${{ matrix.os }}

      - name: Retrieve base build SHA256 tag
        id: base_build
        run: |
          BASE_TAG=$(cat build-base_${{ matrix.os }})
          BUILD_BASE_IMAGE=${{ env.DOCKER_REPOSITORY }}/zabbix-build-base@${BASE_TAG}

          echo ::set-output name=base_tag::${BASE_TAG}
          echo ::set-output name=base_build_image::${BUILD_BASE_IMAGE}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./${{ matrix.build }}/${{ matrix.os }}
          file: ./${{ matrix.build }}/${{ matrix.os }}/Dockerfile
          platforms: ${{ steps.platform.outputs.list }}
          push: ${{ secrets.AUTO_PUSH_IMAGES }}
          tags: ${{ steps.meta.outputs.tags }}
          build-args: BUILD_BASE_IMAGE=${{ steps.base_build.outputs.base_build_image }}

      - name: Image digest
        run: |
            echo ${{ steps.docker_build.outputs.digest }}
            echo "${{ steps.docker_build.outputs.digest }}" > ${{ matrix.build }}_${{ matrix.os }}

      - uses: actions/upload-artifact@v2.2.4
        with:
         name: ${{ matrix.build }}_${{ matrix.os }}
         path: ${{ matrix.build }}_${{ matrix.os }}
         if-no-files-found: error

  build_images:
    timeout-minutes: 70
    needs: [ "build_base_database", "init_build"]
    name: Build ${{ matrix.build }} base on ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        build: ${{ fromJson(needs.init_build.outputs.components) }}
        os: ${{ fromJson(needs.init_build.outputs.os) }}

    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2.3.4
        with:
          ref: "refs/heads/trunk"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Prepare Platform list
        id: platform
        run: |
            platform_list=$(jq -r '.os.${{ matrix.os }} | join(",")' "./build.xml")

            echo ::set-output name=list::$platform_list

      - name: Detect Build Base Image
        id: build_base_image
        run: |
          BUILD_BASE=$(jq -r '.components."${{ matrix.build }}"' "./build.xml")

          echo ::set-output name=build_base::${BUILD_BASE}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.DOCKER_REPOSITORY }}/zabbix-${{ matrix.build }}
          tags: |
            type=raw,value=${{ matrix.os }}-trunk
            type=raw,value=trunk-${{ matrix.os }}
          flavor: |
            latest=auto

      - uses: actions/download-artifact@v2.0.10
        if: ${{ matrix.build != 'snmptraps' }}
        with:
          name: ${{ steps.build_base_image.outputs.build_base }}_${{ matrix.os }}

      - name: Retrieve base build SHA256 tag
        id: base_build
        if: ${{ matrix.build != 'snmptraps' }}
        run: |
          BASE_TAG=$(cat ${{ steps.build_base_image.outputs.build_base }}_${{ matrix.os }})
          BUILD_BASE_IMAGE=${{ env.DOCKER_REPOSITORY }}/zabbix-${{ steps.build_base_image.outputs.build_base }}@${BASE_TAG}

          echo ::set-output name=base_tag::${BASE_TAG}
          echo ::set-output name=base_build_image::${BUILD_BASE_IMAGE}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./${{ matrix.build }}/${{ matrix.os }}
          file: ./${{ matrix.build }}/${{ matrix.os }}/Dockerfile
          platforms: ${{ steps.platform.outputs.list }}
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          build-args: BUILD_BASE_IMAGE=${{ steps.base_build.outputs.base_build_image }}

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
